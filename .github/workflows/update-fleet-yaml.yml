name: Update Fleet YAML Files

on:
  schedule:
    # Run twice daily at 6:00 AM and 6:00 PM UTC
    - cron: '0 6,18 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'main.go'
      - 'go.mod'
      - 'go.sum'

# Add permissions block to allow writing to the repository
permissions:
  contents: write
  pull-requests: write

jobs:
  update-fleet-yaml:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Clean cache
      run: |
        go clean -cache -modcache -testcache || true
        go mod download
        go mod verify

    - name: Build generate_fleet_yaml
      run: go build -o generate_fleet_yaml main.go

    - name: Run generate_fleet_yaml
      run: ./generate_fleet_yaml

    - name: Count generated files
      id: count-files
      run: |
        echo "macos_count=$(ls fleet_yaml_files/macOS/*.yml 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT
        echo "windows_count=$(ls fleet_yaml_files/Windows/*.yml 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT
        echo "file_count=$(( $(ls fleet_yaml_files/macOS/*.yml 2>/dev/null | wc -l) + $(ls fleet_yaml_files/Windows/*.yml 2>/dev/null | wc -l) ))" >> $GITHUB_OUTPUT

    - name: Create update metadata
      run: |
        cat > fleet_yaml_files/UPDATE_METADATA.md << EOF
        # Fleet YAML Files Update Metadata

        ## Last Update
        - **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **GitHub Actions Run**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        - **Total Files Generated**: ${{ steps.count-files.outputs.file_count }}
        - **macOS Files**: ${{ steps.count-files.outputs.macos_count }}
        - **Windows Files**: ${{ steps.count-files.outputs.windows_count }}

        ## Sources
        - **Homebrew Casks API** (macOS PKG files)
        - **Installomator Script** (macOS PKG files)
        - **WinGet Repository** (Windows MSI/EXE files)

        ## Filter Criteria
        - **macOS**: Only PKG installer files (excludes ZIP, DMG, TAR, MPKG)
        - **Windows**: Only x64 MSI and EXE installer files
        - **Architecture**: x64 only for Windows installers

        ## Output Directory
        fleet_yaml_files (organized by platform)

        ## File Structure
        All files follow consistent Fleet YAML structure with appropriate parameters:
        - Standard fields: url, automatic_install, self_service, categories
        - EXE files include: install_script, uninstall_script (with TODO placeholders)
        - Helpful comments with Fleet API documentation links

        ## Automation
        This directory is automatically updated via GitHub Actions workflow.
        EOF

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit and push changes
      run: |
        git add fleet_yaml_files/
        git commit -m "Update Fleet YAML files (${{ steps.count-files.outputs.file_count }} files)

        - macOS: ${{ steps.count-files.outputs.macos_count }} PKG files
        - Windows: ${{ steps.count-files.outputs.windows_count }} MSI/EXE files
        - Generated by generate_fleet_yaml
        - GitHub Actions Run: ${{ github.run_id }}"
        git push 