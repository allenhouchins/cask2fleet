name: Update Fleet YAML Files

on:
  schedule:
    # Run twice daily at 6:00 AM and 6:00 PM UTC
    - cron: '0 6,18 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]

# Add permissions block to allow writing to the repository
permissions:
  contents: write
  pull-requests: write

jobs:
  update-fleet-yaml:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Clean cache
      run: |
        go clean -cache -modcache -testcache || true
        go mod download
        go mod verify

    - name: Build generate_fleet_yaml
      run: go build -o generate_fleet_yaml main.go

    - name: Run generate_fleet_yaml
      run: |
        # Clean up any existing files to avoid conflicts
        rm -rf fleet_yaml_files/
        rm -rf winget-pkgs/
        
        # Run the application
        ./generate_fleet_yaml

    - name: Count generated files
      id: count-files
      run: |
        # Ensure directories exist before counting
        mkdir -p fleet_yaml_files/macOS fleet_yaml_files/Windows
        
        # Count files with error handling
        macos_count=$(find fleet_yaml_files/macOS -name "*.yml" 2>/dev/null | wc -l || echo "0")
        windows_count=$(find fleet_yaml_files/Windows -name "*.yml" 2>/dev/null | wc -l || echo "0")
        file_count=$((macos_count + windows_count))
        
        echo "macos_count=$macos_count" >> $GITHUB_OUTPUT
        echo "windows_count=$windows_count" >> $GITHUB_OUTPUT
        echo "file_count=$file_count" >> $GITHUB_OUTPUT

    - name: Create update metadata
      run: |
        # Ensure directory exists and has proper permissions
        mkdir -p fleet_yaml_files
        chmod 755 fleet_yaml_files
        
        cat > fleet_yaml_files/UPDATE_METADATA.md << EOF
        # Fleet YAML Files Update Metadata

        ## Last Update
        - **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **GitHub Actions Run**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        - **Total Files Generated**: ${{ steps.count-files.outputs.file_count }}
        - **macOS Files**: ${{ steps.count-files.outputs.macos_count }}
        - **Windows Files**: ${{ steps.count-files.outputs.windows_count }}

        ## Sources
        - **Homebrew Casks API** (macOS PKG files)
        - **Installomator Script** (macOS PKG files)
        - **WinGet Repository** (Windows MSI/EXE files)

        ## Filter Criteria
        - **macOS**: Only PKG installer files (excludes ZIP, DMG, TAR, MPKG)
        - **Windows**: Only x64 MSI and EXE installer files
        - **Architecture**: x64 only for Windows installers

        ## Output Directory
        fleet_yaml_files (organized by platform)

        ## File Structure
        All files follow consistent Fleet YAML structure with appropriate parameters:
        - Standard fields: url, automatic_install, self_service, categories
        - EXE files include: install_script, uninstall_script (with TODO placeholders)
        - Helpful comments with Fleet API documentation links

        ## Automation
        This directory is automatically updated via GitHub Actions workflow.
        EOF

    - name: Generate summary file
      run: |
        # Ensure directory exists and has proper permissions
        mkdir -p fleet_yaml_files
        chmod 755 fleet_yaml_files
        
        # Create the header
        echo "# Fleet YAML Files Generated from Homebrew Casks, Installomator, and WinGet" > fleet_yaml_files/SUMMARY.md
        echo "" >> fleet_yaml_files/SUMMARY.md
        echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> fleet_yaml_files/SUMMARY.md
        echo "" >> fleet_yaml_files/SUMMARY.md
        echo "## Summary" >> fleet_yaml_files/SUMMARY.md
        echo "" >> fleet_yaml_files/SUMMARY.md
        echo "Total entries processed: ${{ steps.count-files.outputs.file_count }}" >> fleet_yaml_files/SUMMARY.md
        echo "- macOS files: ${{ steps.count-files.outputs.macos_count }}" >> fleet_yaml_files/SUMMARY.md
        echo "- Windows files: ${{ steps.count-files.outputs.windows_count }}" >> fleet_yaml_files/SUMMARY.md
        echo "" >> fleet_yaml_files/SUMMARY.md
        echo "## Generated Files" >> fleet_yaml_files/SUMMARY.md
        echo "" >> fleet_yaml_files/SUMMARY.md
        
        # Add macOS files to summary
        echo "### macOS Files" >> fleet_yaml_files/SUMMARY.md
        echo "" >> fleet_yaml_files/SUMMARY.md
        if [ -d "fleet_yaml_files/macOS" ]; then
          for file in fleet_yaml_files/macOS/*.yml; do
            if [ -f "$file" ] && [ -r "$file" ]; then
              filename=$(basename "$file" .yml)
              url=$(grep "^url:" "$file" 2>/dev/null | sed 's/url: //' | tr -d ' ' || echo "URL not found")
              echo "#### $filename" >> fleet_yaml_files/SUMMARY.md
              echo "" >> fleet_yaml_files/SUMMARY.md
              echo "- **Source**: homebrew/installomator" >> fleet_yaml_files/SUMMARY.md
              echo "- **Name**: $filename" >> fleet_yaml_files/SUMMARY.md
              echo "- **Description**: Generated from Homebrew cask or Installomator script" >> fleet_yaml_files/SUMMARY.md
              echo "- **Version**: " >> fleet_yaml_files/SUMMARY.md
              echo "- **File**: \`$filename.yml\`" >> fleet_yaml_files/SUMMARY.md
              echo "- **URL**: $url" >> fleet_yaml_files/SUMMARY.md
              echo "" >> fleet_yaml_files/SUMMARY.md
            fi
          done
        fi
        
        # Add Windows files to summary
        echo "### Windows Files" >> fleet_yaml_files/SUMMARY.md
        echo "" >> fleet_yaml_files/SUMMARY.md
        if [ -d "fleet_yaml_files/Windows" ]; then
          for file in fleet_yaml_files/Windows/*.yml; do
            if [ -f "$file" ] && [ -r "$file" ]; then
              filename=$(basename "$file" .yml)
              url=$(grep "^url:" "$file" 2>/dev/null | sed 's/url: //' | tr -d ' ' || echo "URL not found")
              echo "#### $filename" >> fleet_yaml_files/SUMMARY.md
              echo "" >> fleet_yaml_files/SUMMARY.md
              echo "- **Source**: winget" >> fleet_yaml_files/SUMMARY.md
              echo "- **Name**: $filename" >> fleet_yaml_files/SUMMARY.md
              echo "- **Description**: Generated from WinGet repository" >> fleet_yaml_files/SUMMARY.md
              echo "- **Version**: " >> fleet_yaml_files/SUMMARY.md
              echo "- **File**: \`$filename.yml\`" >> fleet_yaml_files/SUMMARY.md
              echo "- **URL**: $url" >> fleet_yaml_files/SUMMARY.md
              echo "" >> fleet_yaml_files/SUMMARY.md
            fi
          done
        fi

    - name: Set proper permissions
      run: |
        # Set proper permissions on all generated files
        chmod -R 644 fleet_yaml_files/*.yml 2>/dev/null || true
        chmod -R 644 fleet_yaml_files/macOS/*.yml 2>/dev/null || true
        chmod -R 644 fleet_yaml_files/Windows/*.yml 2>/dev/null || true
        chmod 644 fleet_yaml_files/*.md 2>/dev/null || true

    - name: Update README if needed
      run: |
        # Update file counts in README if they exist
        if grep -q "Total Files Generated" README.md; then
          sed -i "s/Total Files Generated.*/Total Files Generated: ${{ steps.count-files.outputs.file_count }}/" README.md
        fi
        if grep -q "macOS Files" README.md; then
          sed -i "s/macOS Files.*/macOS Files: ${{ steps.count-files.outputs.macos_count }}/" README.md
        fi
        if grep -q "Windows Files" README.md; then
          sed -i "s/Windows Files.*/Windows Files: ${{ steps.count-files.outputs.windows_count }}/" README.md
        fi

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit and push changes
      run: |
        git add fleet_yaml_files/ README.md
        git commit -m "Update Fleet YAML files and metadata (${{ steps.count-files.outputs.file_count }} files)

        - macOS: ${{ steps.count-files.outputs.macos_count }} PKG files
        - Windows: ${{ steps.count-files.outputs.windows_count }} MSI/EXE files
        - Updated UPDATE_METADATA.md, SUMMARY.md, and README.md
        - Generated by generate_fleet_yaml
        - GitHub Actions Run: ${{ github.run_id }}"
        git push 